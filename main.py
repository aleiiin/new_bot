import configparser
import contextlib

from db import *
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove)
from XlsxWriter.workbook import Workbook
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler

menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
menu_kb.add(InlineKeyboardButton(text="ü•∞–¢–∞—Ä–∏—Ñ—ãü•∞", callback_data='tariffs'))
menu_kb.add(InlineKeyboardButton(text="üåü–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüåü", callback_data='my_profile'))
menu_kb.add(InlineKeyboardButton(text="üìû–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—åüìû", callback_data='callback'))
menu_kb.add(InlineKeyboardButton(text="üî•–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–µ–±—èüî•", callback_data='offer_me'))
menu_kb.add(InlineKeyboardButton(text="–ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data='show_menu_adm'))

menu_user = ReplyKeyboardMarkup(resize_keyboard=True)
menu_user.add(InlineKeyboardButton(text="ü•∞–¢–∞—Ä–∏—Ñ—ãü•∞", callback_data='tariffs'))
menu_user.add(InlineKeyboardButton(text="üåü–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüåü", callback_data='my_profile'))
menu_user.add(InlineKeyboardButton(text="üìû–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—åüìû", callback_data='callback'))
menu_user.add(InlineKeyboardButton(text="üî•–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–µ–±—èüî•", callback_data='offer_me'))


menu_adm = InlineKeyboardMarkup(resize_keyboard=True)
menu_adm.add(InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã', callback_data='edit_tariffs'))
menu_adm.add(InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='mailing'))
menu_adm.add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤—É—é —Ñ—Ä–∞–∑—É', callback_data='new_phrase'))
menu_adm.add(InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∞ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data='edit_deposit'))
menu_adm.add(InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stat'))
menu_adm.add(InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID", callback_data='search'))
menu_adm.add(InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data='edit_helper'))
menu_adm.add(InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data='admin_list'))
menu_adm.add(InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data='offers'))

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
bot = Bot(token=API_TOKEN, proxy='http://proxy.server:3128')
# "http://QDP7WVW8O1:XMFDDihuPd@194.31.73.156:31739"

# bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

cur = con.cursor()

cur.execute('SELECT * FROM Settings')
if not cur.fetchone():
    cur.execute('INSERT INTO Settings VALUES (?, ?, ?, ?, ?)', (1, 1, '', '', 0))
for admin in ADMINS:
    cur.execute(f'SELECT * FROM Admins WHERE user_id={admin}')
    if not cur.fetchone():
        cur.execute('INSERT INTO Admins VALUES (?, ?, ?, ?, ?)', (admin, get_date(), 1, 1, 1))
    cur.execute(f'SELECT * FROM Users WHERE user_id={admin}')
    if not cur.fetchone():
        cur.execute('INSERT INTO Users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)', (admin, '', 0, get_date(), 0, 0, 1, 0, 0))

try:
    file = open('tariffs.txt', 'r', encoding='UTF-8')
except:
    print('–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Ñ–∞–π–ª–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏')
else:
    for line in file.readlines():
        res = list(map(lambda x: x.strip(), line.split('/')))
        if len(res) in (4, 5):
            if res[1] == '0':
                res[1] = '–ù–∞–≤—Å–µ–≥–¥–∞'
            if len(res) == 4:
                res.insert(2, '')
            name = res[0]
            cur.execute(f'SELECT * FROM Tariffs WHERE work=1 AND name="{name}" AND days="{res[1]}"')
            if not cur.fetchone():
                try:
                    cur.execute('INSERT INTO Tariffs VALUES (?, ?, ?, ?, ?)', (name, res[1],
                                                                       res[2], res[3], 1))
                except:
                    print(f'–û—à–∏–±–∫–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞ {res}')
                else:
                    con.commit()
            link = res[4]
            if link[1:].isdigit():
                cur.execute(f'SELECT * FROM Tariffs_links WHERE name="{name}"')
                if not cur.fetchone():
                    try:
                        cur.execute('INSERT INTO Tariffs_links VALUES (?, ?)', (name, link))
                    except:
                        print(f'–û—à–∏–±–∫–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ {res}')
                    else:
                        con.commit()
                else:
                    try:
                        cur.execute(f'UPDATE Tariffs_links SET id={link} WHERE name="{name}"')
                    except:
                        print(f'–û—à–∏–±–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ {res}')
                    else:
                        con.commit()
        elif len(res) == 2:
            name, number = res
            try:
                cur.execute(f'SELECT * FROM Payment_methods WHERE name="{name}"')
            except:
                print(f'–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã {res}')
            else:
                if not cur.fetchone():
                    try:
                        cur.execute('INSERT INTO Payment_methods VALUES (?, ?, ?, ?, ?, ?)', (name,
                                                                                               '', 0.0, number, 0,
                                                                                               1))
                    except:
                        print(f'–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã {res}')
                    else:
                        con.commit()
                else:
                    try:
                        cur.execute(f'UPDATE Payment_methods SET number={number} WHERE name="{name}"')
                    except:
                        print(f'–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã {res}')
                    else:
                        con.commit()
        # elif len(res) == 1:
        #     try:
        #         cur.execute('SELECT * FROM Tariffs WHERE name="–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞"')
        #     except:
        #         print('–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞—Ä–∏—Ñ–æ–º "–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞"')
        #     else:
        #         if not cur.fetchone():
        #             try:
        #                 cur.execute('INSERT INTO Tariffs VALUES (?, ?, ?, ?, ?)', ('–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞', '–ù–∞–≤—Å–µ–≥–¥–∞', '',
        #                                                                            res[0], 1))
        #             except:
        #                 print('–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∞—Ä–∏—Ñ–∞ "–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞"')
        #             else:
        #                 con.commit()

try:
    file = open('ban.txt', 'r', encoding='UTF-8')
except:
    print('–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Ñ–∞–π–ª–∞ —Å –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–º–∏')
else:
    for line in file.readlines():
        try:
            user = int(line.strip())
        except:
            print(f'–û—à–∏–±–∫–∞ —Å –±–∞–Ω–æ–º {line}')
        else:
            cur.execute(f'SELECT * FROM Users WHERE user_id={user}')
            if cur.fetchone():
                cur.execute(f'UPDATE Users SET ban=1 WHERE user_id={user}')
                con.commit()

scheduler = AsyncIOScheduler()


async def check():
    cur.execute('SELECT * FROM Admins')
    admins = tuple(map(lambda x: x[0], cur.fetchall()))
    cur.execute('SELECT * FROM Subs WHERE days != "–ù–∞–≤—Å–µ–≥–¥–∞"')
    subs = cur.fetchall()
    for i in range(len(subs)):
        user_id, days, tariff, date = subs[i]
        tariff = tariff.split('/')[0]
        buy_date = date
        date = str(date).split('/')
        date_now = str(get_date()).split('/')
        day1, month1, year1 = tuple(map(int, list(date_now)))
        day2, month2, year2 = tuple(map(int, list(date)))
        date_now = datetime(year1, month1, day1)
        date = datetime(year2, month2, day2)
        delta = str(date_now - date)
        try:
            delta = int(delta.split(',')[0].split()[0])
        except:
            for admin in admins:
                await bot.send_message(chat_id=admin, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞: {tariff}\n'
                                                           f'User id: {user_id}\n–¢–∞—Ä–∏—Ñ: {tariff}/{days}\n–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏'
                                                           f': {buy_date}')
        else:
            cur.execute(f'SELECT * FROM Tariffs_links WHERE name="{tariff}"')
            group_id = cur.fetchone()
            if group_id:
                group_id = group_id[1]
                try:
                    status = await bot.get_chat_member(chat_id=group_id, user_id=user_id)
                    status = status['status']
                except:
                    for admin in admins:
                        await bot.send_message(chat_id=admin, text=f'‚ùó–í–Ω–∏–º–∞–Ω–∏–µ‚ùó\n–£ –±–æ—Ç–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–Ω–∞–ª–æ–º {tariff}\n'
                                                                   f'–í–æ–∑–º–æ–∂–Ω–æ id –∫–∞–Ω–∞–ª–∞ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ —É –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ '
                                                                   f'–ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ')
                else:
                    if status == 'member':
                        if delta > days:
                            await bot.send_message(chat_id=user_id, text=f'‚ùó–í–Ω–∏–º–∞–Ω–∏–µ‚ùó\n'
                                                                         f'–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {tariff.split("/")}\n'
                                                                         f'–í—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞')
                            try:
                                await bot.kick_chat_member(chat_id=int(group_id), user_id=user_id)
                            except:
                                for admin in admins:
                                    await bot.send_message(chat_id=admin, text=f'‚ùó–í–Ω–∏–º–∞–Ω–∏–µ‚ùó\n–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '
                                                                               f'{user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {tariff}')
                            else:
                                print(f'{user_id} –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ {tariff}')
                                cur.execute(f'DELETE FROM Subs WHERE user_id={user_id} AND tariff="{tariff}"')
                                con.commit()
                            cur.execute(f'SELECT * FROM Subs WHERE user_id={user_id}')
                            if tuple(cur.fetchall()):
                                pass
                            else:
                                cur.execute(f'UPDATE Users SET buy=0 WHERE user_id={user_id}')
                                con.commit()
                        elif delta == days:
                            await bot.send_message(chat_id=user_id, text=f'‚ùó–í–Ω–∏–º–∞–Ω–∏–µ‚ùó\n'
                                                                   f'–ó–∞–≤—Ç—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {tariff}')
            else:
                try:
                    for admin in admins:
                        await bot.send_message(chat_id=admin, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å id –∫–∞–Ω–∞–ª–∞ {tariff}')
                except:
                    print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å id –∫–∞–Ω–∞–ª–∞ {tariff}')
                else:
                    pass


async def schedule_jobs(_):
    scheduler.add_job(check, trigger='interval', hours=24)
    scheduler.start()


def db_find_user(id):
    id = int(id)
    user = [None, None]
    cur.execute(f'SELECT * FROM Users WHERE user_id={id}')
    user[0] = tuple(cur.fetchone())
    if user[0][1] == 1:
        cur.execute(f'SELECT * FROM Subs WHERE user_id = {id}')
        user[1] = tuple(cur.fetchone())

    return user


class Dialog(StatesGroup):

    user_id = State()

    check_new_tariff_state = State()
    add_new_tariff_state = State()
    choice_time_state = State()
    choice_pay_method_state = State()
    accept_pay_state = State()
    pay_fiat_state = State()
    check_pay_fiat_state = State()

    choice_to_delete_state = State()
    ans_to_delete_state = State()
    delete_tariffs_state = State()
    check_tariffs_links_state = State()

    mailing_state = State()
    mailing_new_tariff_state = State()
    mailing_start_state = State()

    mailing_text = State()
    mailing_img = State()
    mailing_caption = State()

    edit_tariff_state = State()
    edit_tariff_choice_state = State()
    edit_tariff_start_state = State()
    edit_tariff_ans_state = State()
    add_tariff_always_state = State()
    check_tariff_always_state = State()

    buyer_photo = State()
    accept_purchase_state = State()
    cancel_purchase_state = State()

    spam_state = State()
    choice_spam_state = State()
    send_spam_state = State()

    edit_phrase_state = State()

    edit_helper_state = State()

    choice_tariff = State()
    choice_days = State()
    choice_description = State()
    choice_price = State()
    choice_method = State()
    choice_promo = State()

    deposit_state = State()

    edit_min_deposit_state = State()

    edit_payment_method_state = State()
    choice_edit_payment_method_state = State()
    edit_name_state = State()
    edit_name_ans_state = State()
    edit_requisites_state = State()
    choice_edit_requisites_state = State()
    edit_requisites_ans_state = State()

    new_method = State()
    old_requisites = State()
    new_requisites = State()

    add_payment_method_state = State()
    add_payment_method_ans_state = State()

    delete_payment_method_state = State()

    edit_forever_state = State()

    balance_pay_check_state = State()

    balance = State()

    deposit_buy = State()
    choice_pay_method = State()
    columns = State()

    helper = State()

    offer_me_state = State()
    media = State()
    caption = State()
    type = State()
    ans_offer_me_state = State()


@dp.message_handler(commands=['start'])
async def start(msg: Message):
    user = msg.from_user.id
    cur.execute(f"SELECT user_id FROM Users WHERE user_id = {user}")
    result = cur.fetchone()
    if result is None:
        date = get_date()
        if user in ADMINS:
            cur.execute("INSERT INTO Users VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?);", (user, msg.from_user.username,
                                                                           0, date, 0, 0, 1, 0, 0))
            cur.execute("INSERT INTO Admins VALUES(?, ?, ?, ?, ?);", (user, date, 1, 1, 0))
        else:
            cur.execute("INSERT INTO Users VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?);", (user, msg.from_user.username,
                                                                           0, date, 0, 0, 0, 0, 0))
    if user in ADMINS:
        await msg.answer(f'{msg.from_user.full_name} –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!', reply_markup=menu_kb)
    else:
        await msg.answer(f'{msg.from_user.full_name} –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!', reply_markup=menu_user)

    con.commit()


@dp.message_handler(text='–ê–¥–º–∏–Ω –º–µ–Ω—é')
async def admin_btn(msg: Message):
    user_id = msg.from_user.id
    cur.execute(f'SELECT * FROM Admins WHERE user_id={user_id}')
    admin = cur.fetchone()
    if admin:
        await msg.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', reply_markup=menu_kb)
        await msg.answer(f'–í–∞—à id:{admin[0]}\n–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º: {admin[1]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ',
                         reply_markup=menu_adm)
    else:
        await msg.answer('–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤', reply_markup=menu_user)


@dp.callback_query_handler(text='edit_tariffs')
async def show_stat(call: CallbackQuery):
    await call.message.delete()

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã', callback_data='add_tariffs'))
    kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ', callback_data='delete_tariffs'))
    kb.add(InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã', callback_data='edit_tariff'))
    kb.add(InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞"', callback_data='edit_forever'))
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb)


@dp.callback_query_handler(text='add_tariffs')
async def add_tariffs_func(call: CallbackQuery, state=FSMContext):
    await call.message.delete()

    if call.data == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        kb = ReplyKeyboardMarkup()
        kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º —Ç–∞—Ä–∏—Ñ–µ –≤ –≤–∏–¥–µ:\n\n–Ω–∞–∑–≤–∞–Ω–∏–µ/–∫–æ–ª-–≤–æ –¥–Ω–µ–π'
                                  '/–æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)/—Ü–µ–Ω–∞/id –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)\n\n'
                                  '"–û—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã', reply_markup=kb)
        await Dialog.check_new_tariff_state.set()


@dp.message_handler(state=Dialog.check_new_tariff_state)
async def check_new_tariff_set(msg: Message, state=FSMContext):
    tariff = msg.text.split('/')
    if tariff[0].lower() == '–æ—Ç–º–µ–Ω–∞':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    elif len(tariff) != 5:
        await msg.answer('–í –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ', reply_markup=menu_adm)
        await state.finish()
    else:
        try:
            tariff[0] = tariff[0].capitalize()
        except:
            await msg.answer('–í –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ', reply_markup=menu_adm)
            await state.finish()
        else:
            name = tariff[0]
            cur.execute(f'SELECT * FROM Tariffs_links WHERE name="{name}"')
            if tariff[4] and not str(tariff[4][1:]).isdigit():
                await msg.answer('ID –≥—Ä—É–ø–ø—ã –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ', reply_markup=menu_kb)
                await state.finish()
            else:
                await state.update_data(choice_tariff=tariff)
                kb = InlineKeyboardMarkup()
                kb.add(InlineKeyboardButton('–î–∞', callback_data='yes'))
                kb.add(InlineKeyboardButton('–ù–µ—Ç', callback_data='to_menu'))
                await msg.delete()
                await msg.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–ö–æ–ª-–≤–æ –¥–Ω–µ–π: {tariff[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {tariff[2]}\n'
                                 f'–¶–µ–Ω–∞: {tariff[3]} ‚ÇΩ\n\n–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ?', reply_markup=kb)
                await Dialog.add_new_tariff_state.set()


@dp.callback_query_handler(state=Dialog.add_new_tariff_state)
async def add_new_tariff_set(call: CallbackQuery, state=FSMContext):
    if call.data == 'yes':
        data = await state.get_data()
        tariff = data.get('choice_tariff')
        name = tariff[0]
        cur.execute(f'SELECT * FROM Tariffs WHERE name="{name}" AND days="{tariff[1]}"')
        if cur.fetchall():
            await call.message.answer(f'–î–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ ({name}/{tariff[1]} –¥–Ω–µ–π) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=menu_kb)
            await state.finish()
        else:
            cur.execute(f'INSERT INTO Tariffs VALUES (?, ?, ?, ?, ?);', (name, tariff[1], tariff[2], tariff[3], 1))
            cur.execute('SELECT * FROM Tariffs_links')
            if name not in tuple(map(lambda x: x[0], cur.fetchall())):
                cur.execute(f'INSERT INTO Tariffs_links VALUES (?, ?)', (name, tariff[4]))
            else:
                cur.execute(f'SELECT * FROM Tariffs_links WHERE name={name}')
                await call.message.answer(f'ID —Ç–∞—Ä–∏—Ñ–∞ {name} –∏–∑–º–µ–Ω—ë–Ω —Å {cur.fetchone()[1]} –Ω–∞ {tariff[4]}')
                cur.execute(f'UPDATE Tariffs_links SET id={tariff[4]}')
            con.commit()
            cur.execute(f'SELECT * FROM Tariffs WHERE name = "{name}" AND work = 1 AND days="–ù–∞–≤—Å–µ–≥–¥–∞"')
            if cur.fetchone():
                kb = InlineKeyboardMarkup()
                kb.add(InlineKeyboardButton('–î–∞', callback_data='mailing'))
                kb.add(InlineKeyboardButton('–ù–µ—Ç', callback_data='to_menu'))
                await call.message.answer(f'–¢–∞—Ä–∏—Ñ {name}/{tariff[1]} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\n–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?',
                                          reply_markup=menu_kb)
                await state.finish()
            else:
                await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ "–ù–∞–≤—Å–µ–≥–¥–∞"')
                await Dialog.add_tariff_always_state.set()
    else:
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()


@dp.message_handler(state=Dialog.add_tariff_always_state)
async def add_tariff_always_set(msg: Message, state=FSMContext):
    price = msg.text
    try:
        price = int(price)
    except:
        new_price = ''
        for x in price:
            if x.isdigit():
                new_price += x
        await state.update_data(choice_price=new_price)
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton('–î–∞', callback_data='yes'))
        kb.add(InlineKeyboardButton('–ù–µ—Ç', callback_data='to_menu'))
        await msg.answer(f'–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏–∏ –≤–≤–∏–¥—É "{new_price}"?', reply_markup=kb)
        await Dialog.check_tariff_always_state.set()
    else:
        data = await state.get_data()
        tariff = data.get('choice_tariff')
        name = tariff[0]
        try:
            cur.execute(f'INSERT INTO Tariffs VALUES (?, ?, ?, ?, ?);', (name, '–ù–∞–≤—Å–µ–≥–¥–∞', tariff[2], price, 1))
        except:
            await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
            await state.finish()
        else:
            con.commit()
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton('–î–∞', callback_data='mailing'))
            kb.add(InlineKeyboardButton('–ù–µ—Ç', callback_data='to_menu'))
            await msg.answer(f'–¢–∞—Ä–∏—Ñ "{name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\n–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?', reply_markup=kb)
            await Dialog.mailing_new_tariff_state.set()


@dp.callback_query_handler(state=Dialog.check_tariff_always_state)
async def check_tariff_always_set(call: CallbackQuery, state=FSMContext):
    pick = call.data
    data = await state.get_data()
    tariff = data.get("choice_tariff")
    if pick == 'to_menu':
        await call.message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ "–ù–∞–≤—Å–µ–≥–¥–∞" –≤ –≥—Ä—É–ø–ø—É '
                                  f'{tariff[0]} –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤:\n–ê–¥–º–∏–Ω –º–µ–Ω—é -> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã ->'
                                  f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã', reply_markup=menu_kb)
        await state.finish()
    elif pick == 'yes':

        cur.execute(f'INSERT INTO Tariffs VALUES (?, ?, ?, ?, ?);', (tariff[0], '–ù–∞–≤—Å–µ–≥–¥–∞', tariff[2],
                                                                     data.get('choice_price'), 1))
        con.commit()
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton('–î–∞', callback_data='mailing'))
        kb.add(InlineKeyboardButton('–ù–µ—Ç', callback_data='to_menu'))
        await call.message.answer('–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\n–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?', reply_markup=kb)
        await Dialog.mailing_new_tariff_state.set()
    else:
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)


@dp.callback_query_handler(text='mailing')
async def mailing_func(call: CallbackQuery, state=FSMContext):
    await call.message.delete()

    if call.data == 'to_menu':
        await call.message.answer('–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=menu_kb)
    else:
        kb = ReplyKeyboardMarkup()
        kb.add(InlineKeyboardButton('–ì–æ—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞', callback_data='phrase'))
        kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
        cur.execute('SELECT * FROM Settings')
        phrase = cur.fetchone()[2]
        if not phrase:
            phrase = 'None'
        await state.update_data(mailing_text=phrase)
        await call.message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ / —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n–ì–æ—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞: {phrase}', reply_markup=kb)
        await Dialog.mailing_state.set()


@dp.message_handler(content_types=['photo', 'text'], state=Dialog.mailing_state)
async def mailing_set(msg: Message, state=FSMContext):
    pick = msg.photo
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes'))
    kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
    if pick:
        caption = ''
        pick = pick[0].file_id
        if msg['caption']:
            caption = msg['caption']
        await state.update_data(mailing_text=caption)
        await state.update_data(mailing_img=pick)
        await msg.answer('–†–∞—Å—Å—ã–ª–∫–∞:')
        await bot.send_photo(chat_id=msg.from_user.id, photo=pick, caption=caption, reply_markup=kb)
        await Dialog.mailing_start_state.set()
    elif msg.text.lower() == '–≥–æ—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞':
        data = await state.get_data()
        if not data.get('choice_tariff'):
            await state.update_data(choice_tariff='')
        data = await state.get_data()
        text = f'{data.get("phrase")} {data.get("choice_tariff")}'
        await state.update_data(mailing_text=text)
        await msg.answer('–†–∞—Å—Å—ã–ª–∫–∞:')
        await bot.send_message(chat_id=msg.from_user.id, text=text, reply_markup=kb)
        await Dialog.mailing_start_state.set()
    else:
        pick = msg.text
        if pick.lower() == '–æ—Ç–º–µ–Ω–∞':
            await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
            await state.finish()
        else:
            await state.update_data(mailing_text=pick)
            await msg.answer('–†–∞—Å—Å—ã–ª–∫–∞:')
            await bot.send_message(chat_id=msg.from_user.id, text=pick, reply_markup=kb)
            await Dialog.mailing_start_state.set()


@dp.callback_query_handler(state=Dialog.mailing_start_state)
async def mailing_start_set(call: CallbackQuery, state=FSMContext):
    pick = call.data
    if pick == 'to_menu':
        await call.message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    elif pick == 'yes':
        cur.execute('SELECT * FROM Users')
        users = tuple(map(lambda x: x[0], cur.fetchall()))
        data = await state.get_data()
        photo = data.get('mailing_img')
        text = data.get('mailing_text')
        length1 = len(users)
        length = len(users)
        if photo:
            for user in users:
                try:
                    await bot.send_photo(chat_id=user, photo=photo, caption=text)
                except:
                    length -= 1
        else:
            for user in users:
                try:
                    await bot.send_message(chat_id=str(user).strip(), text=text)
                except:
                    length -= 1
        await call.message.answer(f'{length}/{length1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É', reply_markup=menu_kb)
        await state.finish()
    else:
        await call.message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
        await state.finish()


@dp.callback_query_handler(text='delete_tariffs')
async def delete_tariffs_func(call: CallbackQuery):
    await call.message.delete()

    cur.execute('SELECT * FROM Tariffs WHERE work=1 AND name != "–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞"')
    res = sorted(tuple(set(map(lambda x: x[0], cur.fetchall()))))
    tariffs = ''
    for i in range(len(res)):
        tariffs += f'{i + 1}. {res[i]}\n'
    kb = ReplyKeyboardMarkup()
    kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
    kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã', callback_data='delete_all_tariffs'))
    await call.message.answer('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤', reply_markup=ReplyKeyboardRemove())
    await call.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞—Ä–∏—Ñ–æ–≤ (–ü—Ä–∏–º–µ—Ä: 1,2,3):\n\n{tariffs}',
                              reply_markup=kb)
    await Dialog.choice_to_delete_state.set()


@dp.message_handler(state=Dialog.choice_to_delete_state)
async def choice_to_delete_set(msg: Message, state=FSMContext):
    pick = msg.text.lower()
    if pick == '–æ—Ç–º–µ–Ω–∞':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    elif pick == '—É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã':
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes'))
        kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
        await msg.answer('–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', reply_markup=menu_kb)
    else:
        try:
            pick = tuple(map(int, pick.split(',')))
        except ValueError:
            await msg.answer('–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ', reply_markup=menu_kb)
            await state.finish()
        except:
            await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
            await state.finish()
        else:
            cur.execute('SELECT * FROM Tariffs WHERE work=1 AND name != "–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞"')
            res = sorted(tuple(set(map(lambda x: x[0], cur.fetchall()))))
            tariffs = list()
            days = list()
            for i in range(len(pick)):
                tariffs.append(res[pick[i] - 1])
            days_to_show = ''
            count = 1
            for tariff in tariffs:
                cur.execute(f'SELECT * FROM Tariffs WHERE work=1 AND name="{tariff}"')
                res = cur.fetchall()
                for day in res:
                    days.append(day)
                    days_to_show += f'{count}. {day}\n'
                    count += 1
            await state.update_data(choice_tariff=days)
            kb = ReplyKeyboardMarkup()
            kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
            kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—Å—ë', callback_data='delete_all'))
            cur.execute('SELECT * FROM Tariffs')
            await state.update_data(columns=", ".join(tuple(map(lambda x: x[0], cur.description))))
            data = await state.get_data()
            await msg.answer(f'–¢–∞—Ä–∏—Ñ—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [{data.get("columns")}]')
            await msg.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞—Ä–∏—Ñ–æ–≤ (–ü—Ä–∏–º–µ—Ä: 1,2,3):\n\n{days_to_show}',
                             reply_markup=kb)
            await Dialog.ans_to_delete_state.set()


@dp.message_handler(state=Dialog.ans_to_delete_state)
async def ans_to_delete_set(msg: Message, state=FSMContext):
    pick = msg.text
    if pick.lower() == '–æ—Ç–º–µ–Ω–∞':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    elif pick.lower() == '—É–¥–∞–ª–∏—Ç—å –≤—Å—ë':
        await msg.answer('–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', reply_markup=menu_kb)
        await state.finish()
        pass
        # kb = InlineKeyboardMarkup()
        # kb.add(InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes'))
        # kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
        # await msg.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=kb)
    else:
        try:
            pick = tuple(map(int, pick.split(',')))
        except ValueError:
            await msg.answer('–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ', reply_markup=menu_kb)
            await state.finish()
        except:
            await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
            await state.finish()
        else:
            data = await state.get_data()
            tariffs = data.get('choice_tariff')
            tariffs_to_delete = list()
            tariffs_to_delete_show = ''
            for i in range(len(pick)):
                tariffs_to_delete.append(tariffs[pick[i] - 1])
                tariffs_to_delete_show += f'{i + 1}. {tariffs[pick[i] - 1]}\n'
            await state.update_data(choice_tariff=tariffs_to_delete)
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes'))
            kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
            await msg.answer(f'–¢–∞—Ä–∏—Ñ—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ({data.get("columns")})', reply_markup=ReplyKeyboardRemove())
            await msg.answer(f'–£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã:\n{tariffs_to_delete_show}', reply_markup=kb)
            await Dialog.delete_tariffs_state.set()


@dp.callback_query_handler(state=Dialog.delete_tariffs_state)
async def delete_tariffs_set(call: CallbackQuery, state=FSMContext):
    if call.data == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    elif call.data == 'yes':
        data = await state.get_data()
        tariffs_to_del = data.get('choice_tariff')
        try:
            length = len(tariffs_to_del)
        except:
            length = 0
        else:
            count = 0
            for i in range(len(tariffs_to_del)):
                try:
                    tariff = tariffs_to_del[i]
                    cur.execute(f'DELETE FROM Tariffs WHERE work = 1 AND name = "{tariff[0]}" AND '
                                f'days = "{tariff[1]}" AND price = "{tariff[3]}"')
                    con.commit()
                except:
                    await call.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                else:
                    count += 1
            tariffs_to_del = tuple(set(map(lambda x: x[0], tariffs_to_del)))
            await state.update_data(choice_tariff=tariffs_to_del)
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton('–î–∞', callback_data='yes'))
            kb.add(InlineKeyboardButton('–ù–µ—Ç', callback_data='to_menu'))
            await call.message.answer(f'–£–¥–∞–ª–µ–Ω–æ {count}/{length} —Ç–∞—Ä–∏—Ñ–æ–≤', reply_markup=menu_kb)
            # tariffs_to_del = set(list(map(lambda x: x.split('/'), tariffs_to_del)))
            cur.execute('SELECT * FROM Tariffs WHERE work=1')
            tariffs = cur.fetchall()
            tariffs = set(list(map(lambda x: x[0], tariffs)))
            for tariff in tariffs_to_del:
                if not tariff in tariffs:
                    cur.execute(f'DELETE FROM Tariffs_links WHERE name="{tariff}"')
            con.commit()
            await state.finish()
    else:
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.', reply_markup=menu_kb)
        await state.finish()


@dp.callback_query_handler(text='edit_tariff')
async def edit_tariff_func(call: CallbackQuery, state=FSMContext):
    await call.message.delete()

    await call.message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤', reply_markup=ReplyKeyboardRemove())

    kb = InlineKeyboardMarkup()
    cur.execute('SELECT * FROM Tariffs WHERE work=1 AND name != "all"')
    tariffs = sorted(tuple(set(map(lambda x: x[0], cur.fetchall()))))
    for tariff in tariffs:
        kb.add(InlineKeyboardButton(tariff, callback_data=tariff))
    kb.add(InlineKeyboardButton('–ì—Ä—É–ø–ø—ã –±–µ–∑ id / —Å –Ω–µ–≤–µ—Ä–Ω—ã–º id', callback_data='not_correct'))
    kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø–ø—É', reply_markup=kb)
    await Dialog.edit_tariff_state.set()


@dp.callback_query_handler(state=Dialog.edit_tariff_state)
async def edit_tariff_set(call: CallbackQuery, state=FSMContext):
    await call.message.delete()

    pick = call.data
    if pick == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        cur.execute('SELECT * FROM Tariffs WHERE work=1 AND name != "all"')
        tariffs = list(set(map(lambda x: x[0], cur.fetchall())))
        if pick == 'not_correct':
            cur.execute('SELECT * FROM Tariffs_links')
            links = cur.fetchall()
            for i in range(len(links)):
                tariff = links[i][0]
                if tariff in tariffs:
                    link = links[i][1]
                    if link:
                        if str(link).isdigit():
                            tariffs.remove(tariff)
            if tariffs:
                await call.message.answer(f'–ì—Ä—É–ø–ø—ã –±–µ–∑ id / —Å –Ω–µ–≤–µ—Ä–Ω—ã–º id: {tariffs}', reply_markup=menu_kb)
            else:
                await call.message.answer('–£ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –µ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id')
            await state.finish()
        else:
            kb = InlineKeyboardMarkup()
            for tariff in tariffs:
                kb.add(InlineKeyboardButton(tariff, callback_data=tariff))
            kb.add(InlineKeyboardButton('–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞', callback_data='–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞'))
            kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
            await call.message.answer('–ì—Ä—É–ø–ø—ã:', reply_markup=kb)
            await Dialog.edit_tariff_choice_state.set()


@dp.callback_query_handler(state=Dialog.edit_tariff_choice_state)
async def edit_tariff_choice_set(call: CallbackQuery, state=FSMContext):
    await call.message.delete()

    pick = call.data
    if pick == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        await state.update_data(choice_tariff=pick)
        cur.execute(f'SELECT * FROM Tariffs WHERE work=1 AND name="{pick}"')
        tariffs = cur.fetchall()
        description = tariffs[0][2]
        await state.update_data(choice_description=description)
        if pick == '–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞':
            cur.execute(f'SELECT * FROM Tariffs WHERE work=1 AND name="{pick}"')
            price = cur.fetchone()[3]
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É', callback_data='change_price'))
            kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
            await call.message.answer(f'–¢–∞—Ä–∏—Ñ: {pick}\n–¶–µ–Ω–∞: {price}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}', reply_markup=kb)
            await Dialog.edit_tariff_start_state.set()
        else:
            kb = InlineKeyboardMarkup()
            for tariff in tariffs:
                days, price = tariff[1], tariff[3]
                if days == '–ù–∞–≤—Å–µ–≥–¥–∞':
                    kb.add(InlineKeyboardButton(f'{days} / {price} —Ä—É–±.', callback_data=f'{days}/{price}'))
                else:
                    kb.add(InlineKeyboardButton(f'{days} –¥–Ω–µ–π / {price} —Ä—É–±.', callback_data=f'{days}/{price}'))
            kb.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∫–∞–Ω–∞–ª–∞',
                                        callback_data='change_description'))
            kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
            await call.message.answer(f'–¢–∞—Ä–∏—Ñ: {pick}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}', reply_markup=kb)
            await Dialog.edit_tariff_start_state.set()


@dp.callback_query_handler(state=Dialog.edit_tariff_start_state)
async def edit_tariff_start_set(call: CallbackQuery, state=FSMContext):
    await call.message.delete()

    pick = call.data
    if pick == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        data = await state.get_data()
        tariff = data.get('choice_tariff')
        description = data.get('choice_description')
        if tariff == '–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞':
            kb = ReplyKeyboardMarkup()
            kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
            if pick == 'change_description':
                await call.message.answer(f'–¢–∞—Ä–∏—Ñ: {tariff}\n–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n'
                                          f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', reply_markup=kb)
                await state.update_data(choice_method='description')
                await Dialog.edit_tariff_start_state.set()
        else:
            if pick == 'change_description':
                kb = ReplyKeyboardMarkup()
                kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
                await call.message.answer(f'–¢–∞—Ä–∏—Ñ: {tariff}\n–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n'
                                          f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', reply_markup=kb)
                await state.update_data(choice_method='description')
                await Dialog.edit_tariff_start_state.set()
            else:
                kb = ReplyKeyboardMarkup()
                kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
                days, price = pick.split('/')
                await state.update_data(choice_days=days)
                await state.update_data(choice_price=price)
                if days == '–ù–∞–≤—Å–µ–≥–¥–∞':
                    await call.message.answer(f'–¢–∞—Ä–∏—Ñ: {tariff}\n–¶–µ–Ω–∞: {price} —Ä—É–±.\n–°—Ä–æ–∫: {days}\n–û–ø–∏—Å–∞–Ω–∏–µ: '
                                              f'{description}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞:', reply_markup=kb)
                else:
                    await call.message.answer(f'–¢–∞—Ä–∏—Ñ: {tariff}\n–¶–µ–Ω–∞: {price} —Ä—É–±.\n–°—Ä–æ–∫: {days} –¥–Ω–µ–π\n'
                                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞:',
                                              reply_markup=kb)
                await state.update_data(choice_method='price')
                await Dialog.edit_tariff_start_state.set()


@dp.message_handler(state=Dialog.edit_tariff_start_state)
async def edit_tariff_start_set(msg: Message, state=FSMContext):
    await msg.delete()

    pick = msg.text
    if pick.lower() == '–º–µ–Ω—é‚Ü©Ô∏è':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        data = await state.get_data()
        choice = data.get('choice_method')
        tariff = data.get('choice_tariff')
        description = data.get('choice_description')
        price = data.get('choice_price')
        days = data.get('choice_days')
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes'))
        kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
        if choice == 'description':
            if tariff == '–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞':
                await msg.answer(f'–¢–∞—Ä–∏—Ñ: {tariff}\n–¶–µ–Ω–∞: {price}\n–û–ø–∏—Å–∞–Ω–∏–µ: {pick}', reply_markup=kb)
            else:
                await msg.answer(f'–¢–∞—Ä–∏—Ñ: {tariff}\n–û–ø–∏—Å–∞–Ω–∏–µ: {pick}', reply_markup=kb)
                await state.update_data(choice_description=pick)
        elif choice == 'price':
            if tariff == '–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞':
                await msg.answer(f'–¢–∞—Ä–∏—Ñ: {tariff}\n–¶–µ–Ω–∞: {pick}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}', reply_markup=kb)
            else:
                await msg.answer(f'–¢–∞—Ä–∏—Ñ: {tariff}\n–¶–µ–Ω–∞: {pick}\n–°—Ä–æ–∫: {days}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}', reply_markup=kb)
            await state.update_data(choice_price=pick)
        else:
            await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
            await state.finish()


@dp.callback_query_handler(state=Dialog.edit_tariff_ans_state)
async def edit_tariff_ans_set(call: CallbackQuery, state=FSMContext):
    if call.data == 'yes':
        data = await state.get_data()
        choice = data.get('choice_method')
        tariff = [data.get('choice_tariff'), data.get('choice_days'), data.get('choice_description'),
                  data.get('choice_price')]
        if choice == 'description':
            try:
                cur.execute(f'UPDATE Tariffs SET description="{tariff[2]}" WHERE name="{tariff[0]}" AND '
                            f'days="{tariff[1]}" AND price="{tariff[3]}" AND work=1')
            except:
                await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã', reply_markup=menu_kb)
            else:
                await call.message.answer(f'–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {tariff[0]} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {tariff[2]}',
                                          reply_markup=menu_kb)
        elif choice == 'price':
            try:
                cur.execute(f'UPDATE Tariffs SET price="{tariff[3]}" WHERE name="{tariff[0]}" AND '
                            f'days="{tariff[1]}" AND description="{tariff[2]}" AND work=1')
            except:
                await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã', reply_markup=menu_kb)
            else:
                await call.message.answer(f'–¶–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff[0]}/{tariff[1]} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {tariff[3]} —Ä—É–±.',
                                          reply_markup=menu_kb)

        else:
            await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
            await state.finish()
    else:
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã', reply_markup=menu_kb)
        await state.finish()


@dp.callback_query_handler(text='edit_forever')
async def edit_forever_func(call: CallbackQuery):
    cur.execute('SELECT * FROM Tariffs WHERE name="–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞"')
    res = cur.fetchone()
    if res:
        price = res[3]
    else:
        price = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    kb = ReplyKeyboardMarkup()
    kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
    await call.message.answer(f'–¶–µ–Ω–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ "–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞": {price}\n'
                              f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É', reply_markup=kb)
    await Dialog.edit_forever_state.set()


@dp.message_handler(state=Dialog.edit_forever_state)
async def edit_forever_set(msg: Message, state=FSMContext):
    price = msg.text.lower()
    if price == '–æ—Ç–º–µ–Ω–∞':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        if price.isdigit():
            cur.execute('SELECT * FROM Tariffs WHERE name="–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞"')
            res = cur.fetchone()
            if res:
                try:
                    cur.execute(f'UPDATE Tariffs SET price={price} WHERE name="–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞"')
                    con.commit()
                except:
                    await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
                    await state.finish()
                else:
                    await msg.answer('–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞', reply_markup=menu_kb)
                    await state.finish()
            else:
                try:
                    cur.execute('INSERT INTO Tariffs VALUES (?, ?, ?, ?, ?)', ('–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞', '–ù–∞–≤—Å–µ–≥–¥–∞',
                                                                               '', str(price), 1))
                    con.commit()
                except:
                    await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
                    await state.finish()
                else:
                    await msg.answer('–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞', reply_markup=menu_kb)
                    await state.finish()
        else:
            await msg.answer('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ', reply_markup=menu_kb)
            await state.finish()


@dp.callback_query_handler(text='new_phrase')
async def new_phrase_func(call: CallbackQuery):
    await call.message.delete()

    kb = ReplyKeyboardMarkup()
    kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
    cur.execute('SELECT * FROM Settings')
    phrase = cur.fetchone()[2]
    await call.message.answer(f'–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≥–æ—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞: {phrase} "–¢–∞—Ä–∏—Ñ"\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é —Ñ—Ä–∞–∑—É', reply_markup=kb)
    await Dialog.edit_phrase_state.set()


@dp.message_handler(state=Dialog.edit_phrase_state)
async def edit_phrase_set(msg: Message, state=FSMContext):
    phrase = msg.text
    if phrase.lower() == '–æ—Ç–º–µ–Ω–∞':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        try:
            cur.execute(f'UPDATE Settings SET phrase_tariff="{phrase}"')
            con.commit()
        except:
            await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
        else:
            await msg.answer(f'–ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞: {phrase} "–¢–∞—Ä–∏—Ñ"', reply_markup=menu_kb)
            await state.finish()


@dp.message_handler(state=Dialog.edit_phrase_state)
async def edit_phrase_set(msg: Message, state=FSMContext):
    phrase = msg.text
    if phrase.lower() == '–æ—Ç–º–µ–Ω–∞':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        try:
            cur.execute(f'UPDATE Settings SET phrase_tariff={phrase}')
            con.commit()
        except:
            await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
        else:
            await msg.answer(f'–ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞: {phrase} "–¢–∞—Ä–∏—Ñ"', reply_markup=menu_kb)
            await state.finish()


@dp.callback_query_handler(text='stat')
async def stat_func(call: CallbackQuery):
    cur.execute('SELECT * FROM Users WHERE admin=0')
    users = cur.fetchall()
    try:
        bought = sum(tuple(map(lambda x: x[3], filter(lambda x: x[3], users))))
    except:
        bought = '–û—à–∏–±–∫–∞'
    else:
        cur.execute('SELECT * FROM Subs')
        subs = cur.fetchall()
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton('–ü—Ä–æ–¥–∞–∂–∏', callback_data='show_purchases_list'))
        kb.add(InlineKeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data='show_users_list'))
        kb.add(InlineKeyboardButton('–ü–æ–¥–ø–∏—Å—á–∏–∫–∏', callback_data='show_subs_list'))
        kb.add(InlineKeyboardButton('–ê–¥–º–∏–Ω—ã', callback_data='show_admins_list'))
        try:
            cur.execute('SELECT * FROM Purchase WHERE accept=1 and admin=0')
            purchases = list(map(lambda x: (int(x[5]), x[1]), cur.fetchall()))
            all = sum(tuple(map(lambda x: x[0], purchases)))
            week, in_month = 0, 0
            day, month, year = tuple(map(int, get_date().split('/')))
            now = datetime(year, month, day)
            for purchase in purchases:
                day1, month1, year1 = tuple(map(int, purchase[1].split('/')))
                date = datetime(year1, month1, day1)
                delta = str(now - date)
                if delta == '0:00:00':
                    delta = 0
                else:
                    delta = int(delta.split(',')[0].split()[0])
                if delta <= 7:
                    week += purchase[0]
                if delta <= 32:
                    in_month += purchase[0]
            all = sum(tuple(map(lambda x: int(x[0]), purchases)))
            today = sum(tuple(map(lambda x: int(x[0]), tuple(filter(lambda x: x[1] == get_date(), purchases)))))
        except:
            await call.message.answer(f'–ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –±–æ—Ç–∞: {len(users)}\n–ü–æ–∫—É–ø–æ–∫: {bought}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(subs)}',
                                      reply_markup=kb)
        else:
            await call.message.answer(f'–ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –±–æ—Ç–∞: {len(users)}\n–ü–æ–∫—É–ø–æ–∫: {bought}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(subs)}\n'
                                      f'\n\n–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:\n–í—Å–µ–≥–æ: {all} —Ä—É–±.\n–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today} —Ä—É–±.\n–ó–∞ –Ω–µ–¥–µ–ª—é: {week} —Ä—É–±.\n'
                                      f'–ó–∞ –º–µ—Å—è—Ü: {in_month} —Ä—É–±.', reply_markup=kb)


@dp.callback_query_handler(text='show_purchases_list')
async def show_users_list_func(call: CallbackQuery):
    try:
        name = 'show_purchases_list.xlsx'
        workbook = Workbook(name)
        worksheet = workbook.add_worksheet()
        cur.execute('SELECT * FROM Purchase WHERE admin=0')
        cols = cur.description
        bd = cur.fetchall()
        for col in range(len(cols)):
            worksheet.write(0, col, str(cols[col][0]))
        for row in range(len(bd)):
            for col in range(len(bd[row])):
                worksheet.write(row + 1, col, str(bd[row][col]))
        workbook.close()
    except:
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
    else:
        await call.message.reply_document(open(name, 'rb'))


@dp.callback_query_handler(text='show_users_list')
async def show_users_list_func(call: CallbackQuery):
    try:
        name = 'show_users_list.xlsx'
        workbook = Workbook(name)
        worksheet = workbook.add_worksheet()
        cur.execute('SELECT * FROM Users')
        cols = cur.description
        bd = cur.fetchall()
        for col in range(len(cols)):
            worksheet.write(0, col, str(cols[col][0]))
        for row in range(len(bd)):
            for col in range(len(bd[row])):
                worksheet.write(row + 1, col, str(bd[row][col]))
        workbook.close()
    except:
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
    else:
        await call.message.reply_document(open(name, 'rb'))


@dp.callback_query_handler(text='show_subs_list')
async def show_subs_list_func(call: CallbackQuery):
    try:
        name = 'show_subs_list.xlsx'
        workbook = Workbook(name)
        worksheet = workbook.add_worksheet()
        cur.execute('SELECT * FROM Subs')
        cols = cur.description
        bd = cur.fetchall()
        for col in range(len(cols)):
            worksheet.write(0, col, str(cols[col][0]))
        for row in range(len(bd)):
            for col in range(len(bd[row])):
                worksheet.write(row + 1, col, str(bd[row][col]))
        workbook.close()
    except:
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
    else:
        await call.message.reply_document(open(name, 'rb'))


@dp.callback_query_handler(text='show_admins_list')
async def show_subs_list_func(call: CallbackQuery):
    try:
        name = 'show_admins_list.xlsx'
        workbook = Workbook(name)
        worksheet = workbook.add_worksheet()
        cur.execute('SELECT * FROM Admins')
        cols = cur.description
        bd = cur.fetchall()
        for col in range(len(cols)):
            worksheet.write(0, col, str(cols[col][0]))
        for row in range(len(bd)):
            for col in range(len(bd[row])):
                worksheet.write(row + 1, col, str(bd[row][col]))
        workbook.close()
    except:
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
    else:
        await call.message.reply_document(open(name, 'rb'))


@dp.callback_query_handler(text='search')
async def search_func(call: CallbackQuery):
    await call.message.answer('–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', reply_markup=menu_kb)
    pass


@dp.callback_query_handler(text='edit_helper')
async def search_func(call: CallbackQuery, state=FSMContext):
    cur.execute('SELECT * FROM Settings')
    helper = cur.fetchone()[3]
    await state.update_data(helper=helper)
    kb = ReplyKeyboardMarkup()
    kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏', callback_data='delete_helper'))
    kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
    if helper:
        await call.message.answer(f'–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {helper}\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–æ–≤–æ–π —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
                                  reply_markup=kb)
    else:
        await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–æ–≤–æ–π —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏', reply_markup=kb)
    await Dialog.edit_helper_state.set()


@dp.message_handler(state=Dialog.edit_helper_state)
async def edit_helper_set(msg: Message, state=FSMContext):
    pick = msg.text
    if pick.lower() == '–æ—Ç–º–µ–Ω–∞':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
    elif pick.lower() == '—É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏':
        try:
            cur.execute(f'UPDATE Settings SET helper="" WHERE rowid=1')
        except:
            await msg.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏', reply_markup=menu_kb)
        else:
            await msg.answer('–ö–æ–Ω—Ç–∞–∫—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–¥–∞–ª—ë–Ω', reply_markup=menu_kb)
    else:
        try:
            cur.execute(f'UPDATE Settings SET helper="{pick}" WHERE rowid=1')
        except:
            await msg.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏', reply_markup=menu_kb)
        else:
            data = await state.get_data()
            await msg.answer(f'{data.get("helper")} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {pick}', reply_markup=menu_kb)
    await state.finish()


@dp.callback_query_handler(text='edit_deposit')
async def edit_helper_set(call: CallbackQuery, state=FSMContext):
    cur.execute('SELECT * FROM Settings')
    mn = cur.fetchone()[4]
    cur.execute('SELECT * FROM Payment_methods')
    payments = len(cur.fetchall())
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', callback_data='edit_min_deposit'))
    kb.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', callback_data='edit_payment_method'))
    kb.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', callback_data='add_payment_method'))
    await call.message.answer(f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {mn}\n–°–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {payments}\n'
                              f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb)


@dp.callback_query_handler(text='edit_min_deposit')
async def edit_min_deposit_func(call: CallbackQuery):
    kb = ReplyKeyboardMarkup()
    kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
    await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)', reply_markup=kb)
    await Dialog.edit_min_deposit_state.set()


@dp.message_handler(state=Dialog.edit_min_deposit_state)
async def edit_min_deposit_set(msg: Message, state=FSMContext):
    pick = msg.text.lower()
    if pick == '–æ—Ç–º–µ–Ω–∞':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
    elif pick.isdigit():
        pick = int(pick)
        if pick >= 0:
            try:
                cur.execute(f'UPDATE Settings SET min_deposit={pick}')
                con.commit()
            except:
                await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
            else:
                await msg.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞', reply_markup=menu_kb)
        else:
            await msg.answer('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è',
                             reply_markup=menu_kb)
            await state.finish()
    else:
        await msg.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Å—É–º–º—É', reply_markup=menu_kb)
    await state.finish()


@dp.callback_query_handler(text='edit_payment_method')
async def edit_min_deposit_func(call: CallbackQuery):
    cur.execute('SELECT * FROM Payment_methods')
    methods = sorted(list(set(map(lambda x: x[0], cur.fetchall()))))
    kb = InlineKeyboardMarkup()
    for method in methods:
        kb.add(InlineKeyboardButton(method, callback_data=method))
    kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
    await call.message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã', reply_markup=ReplyKeyboardRemove())
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=kb)
    await Dialog.edit_payment_method_state.set()


@dp.callback_query_handler(state=Dialog.edit_payment_method_state)
async def edit_payment_method_set(call: CallbackQuery, state=FSMContext):
    pick = call.data
    if pick == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        await state.update_data(choice_pay_method=pick)
        cur.execute(f'SELECT * FROM Payment_methods WHERE name="{pick}" AND work=1')
        method = cur.fetchone()
        await state.update_data(choice_pay_method=method[0])
        await state.update_data(old_requisites=method[3])
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data='edit_name'))
        kb.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='edit_requisites'))
        kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='delete_method'))
        kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
        await call.message.answer(f'{pick}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb)
        await Dialog.choice_edit_payment_method_state.set()


@dp.callback_query_handler(state=Dialog.choice_edit_payment_method_state)
async def choice_edit_payment_method_set(call: CallbackQuery, state=FSMContext):
    await call.message.delete()

    pick = call.data
    if pick == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        data = await state.get_data()
        method = data.get('choice_pay_method')
        kb = ReplyKeyboardMarkup()
        kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
        if pick == 'edit_name':
            await call.message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è {method}', reply_markup=kb)
            await Dialog.edit_name_state.set()
        elif pick == 'edit_requisites':
            await call.message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è {method}', reply_markup=kb)
            await Dialog.edit_requisites_state.set()
        elif pick == 'delete_method':
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='yes'))
            kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
            await call.message.answer(f'–£–¥–∞–ª–∏—Ç—å "{method}"\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=kb)
            await Dialog.delete_payment_method_state.set()


@dp.message_handler(state=Dialog.edit_name_state)
async def edit_name_set(msg: Message, state=FSMContext):
    await msg.delete()

    name = msg.text
    if name.lower() == '–æ—Ç–º–µ–Ω–∞':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        data = await state.get_data()
        method = data.get('choice_pay_method')
        name = name.capitalize()
        if method == name:
            await msg.answer('–¢–∞–∫–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=menu_kb)
            await state.finish()
        else:
            await state.update_data(new_method=name)
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes'))
            kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
            await msg.answer(f'–ó–∞–º–µ–Ω–∏—Ç—å {method} –Ω–∞ {name}?', reply_markup=kb)
            await Dialog.edit_name_ans_state.set()


@dp.callback_query_handler(state=Dialog.edit_name_ans_state)
async def edit_name_ans_set(call: CallbackQuery, state=FSMContext):
    if call.data == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        try:
            data = await state.get_data()
            new, old = data.get('new_method'), data.get('choice_pay_method')
            cur.execute(f'UPDATE Payment_methods SET name="{new}" WHERE name="{old}" AND work=1')
            con.commit()
        except:
            await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
            await state.finish()
        else:
            await call.message.answer(f'{old} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new}', reply_markup=menu_kb)
            await state.finish()


@dp.callback_query_handler(state=Dialog.edit_requisites_state)
async def edit_requisites_set(call: CallbackQuery, state=FSMContext):
    data = await state.get_data()
    method = data.get('choice_pay_method')
    kb = ReplyKeyboardMarkup()
    kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
    await call.message.answer(f'{method}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', reply_markup=kb)
    await Dialog.choice_edit_requisites_state.set()


@dp.message_handler(state=Dialog.choice_edit_requisites_state)
async def choice_edit_requisites_set(msg: Message, state=FSMContext):
    await msg.delete()

    pick = msg.text.lower()
    if pick == '–æ—Ç–º–µ–Ω–∞':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        data = await state.get_data()
        old = data.get('old_requisites')
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes'))
        kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
        await msg.answer(f'{data.get("choice_pay_method")}\n–ó–∞–º–µ–Ω–∏—Ç—å {old} –Ω–∞ {pick}?', reply_markup=kb)
        await Dialog.edit_requisites_ans_state.set()


@dp.callback_query_handler(state=Dialog.edit_requisites_ans_state)
async def edit_requisites_ans_set(call: CallbackQuery, state=FSMContext):
    await call.message.delete()

    if call.data == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        try:
            data = await state.get_data()
            old, new, method = data.get('old_requisites'), data.get('new_requisites'), data.get("choice_pay_method")
            cur.execute(f'UPDATE Payment_methods SET number="{new}" WHERE name="{method}" AND number="{old}"')
            con.commit()
        except:
            await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
            await state.finish()
        else:
            await call.message.answer(f'{method}\n{old} —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ {new}', reply_markup=menu_kb)
            await state.finish()



@dp.callback_query_handler(text='add_payment_method')
async def edit_min_deposit_func(call: CallbackQuery):
    kb = ReplyKeyboardMarkup()
    kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
    await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤ –≤–∏–¥–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ/—Ä–µ–∫–≤–∏–∑–∏—Ç—ã', reply_markup=kb)
    await Dialog.add_payment_method_state.set()


@dp.message_handler(state=Dialog.add_payment_method_state)
async def add_payment_method_set(msg: Message, state=FSMContext):
    pick = msg.text
    if pick.lower() == '–æ—Ç–º–µ–Ω–∞':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        pick = pick.split('/')
        if len(pick) != 2:
            await msg.answer('–í –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
            await state.finish()
        else:
            cur.execute(f'SELECT * FROM Payment_methods WHERE name="{pick[0]}"')
            if cur.fetchone():
                await msg.answer('–°–ø–æ—Å–æ–± —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=menu_kb)
                await state.finish()
            else:
                await state.update_data(choice_pay_method=pick)
                kb = InlineKeyboardMarkup()
                kb.add(InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes'))
                kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
                await msg.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {pick[0]}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {pick[1]}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?', reply_markup=kb)
                await Dialog.add_payment_method_ans_state.set()


@dp.callback_query_handler(state=Dialog.add_payment_method_ans_state)
async def add_payment_method_ans_set(call: CallbackQuery, state=FSMContext):
    if call.data == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        try:
            data = await state.get_data()
            new = data.get('choice_pay_method')
            cur.execute('INSERT INTO Payment_methods VALUES (?, ?, ?, ?, ?, ?)', (new[0], '', '', new[1], 0, 1))
            con.commit()
        except:
            await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
            await state.finish()
        else:
            await call.message.answer(f'–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã "{new[0]}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=menu_kb)
            await state.finish()


@dp.callback_query_handler(state=Dialog.delete_payment_method_state)
async def delete_payment_method_set(call: CallbackQuery, state=FSMContext):
    if call.data == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
    else:
        try:
            data = await state.get_data()
            method = data.get('choice_pay_method')
            cur.execute(f'DELETE FROM Payment_methods WHERE name="{method}" AND work=1')
            con.commit()
        except:
            await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
            await state.finish()
        else:
            await call.message.answer(f'"{method}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω', reply_markup=menu_kb)
            await state.finish()


@dp.message_handler(text='ü•∞–¢–∞—Ä–∏—Ñ—ãü•∞')
async def tariffs_btn(msg: Message):
    cur.execute(f'SELECT * FROM Tariffs WHERE work=1 AND name != "–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞"')
    tariffs = sorted(tuple(set(map(lambda x: x[0], cur.fetchall()))))
    if tariffs:
        kb = InlineKeyboardMarkup()
        for i in range(len(tariffs)):
            tariff = tariffs[i]
            kb.add(InlineKeyboardButton(tariff, callback_data=tariff))
        cur.execute('SELECT * FROM Settings')
        if cur.fetchone()[1]:
            try:
                cur.execute('SELECT * FROM Tariffs WHERE work=1 AND days="–ù–∞–≤—Å–µ–≥–¥–∞"')
                tariff = cur.fetchone()[0]
                # kb.add(InlineKeyboardButton('–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞', callback_data="–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞"))
            except:
                pass
        kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
        await msg.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!', reply_markup=ReplyKeyboardRemove())
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:', reply_markup=kb)
        await (Dialog.choice_time_state.set())
    else:
        await msg.answer('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', reply_markup=menu_user)


@dp.callback_query_handler(state=Dialog.choice_time_state)
async def choice_time_set(call: CallbackQuery, state=FSMContext):
    await call.message.delete()

    pick = call.data
    if pick == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_user)
        await state.finish()
    else:
        await state.update_data(deposit_buy='buy')
        await state.update_data(choice_tariff=pick)
        await state.update_data(user_id=call.from_user.id)
        data = await state.get_data()
        if pick == "–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞":
            await state.update_data(choice_days='–ù–∞–≤—Å–µ–≥–¥–∞')
            data = await state.get_data()
            cur.execute('SELECT * FROM Payment_methods WHERE work=1')
            methods = cur.fetchall()
            kb = InlineKeyboardMarkup()
            for i in range(len(methods)):
                method = methods[i][0]
                kb.add(InlineKeyboardButton(method, callback_data=method))
            kb.add(InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å', callback_data='–ë–∞–ª–∞–Ω—Å'))
            kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
            cur.execute(f'SELECT * FROM Tariffs WHERE name="{data.get("choice_tariff")}" AND '
                        f'days="{data.get("choice_days")}"')
            tariff = cur.fetchone()
            try:
                await state.update_data(choice_price=tariff[3])
            except:
                await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_user)
                await state.finish()
            else:
                cur.execute('SELECT * FROM Tariffs WHERE work=1 AND name != "–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞"')
                tariffs = '\n'.join(sorted(tuple(filter(lambda x: x.strip() != 'all', set(map(lambda x: x[0], cur.fetchall()))))))
                await call.message.answer(f'–¢–∞—Ä–∏—Ñ: –í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞\n–°—Ä–æ–∫: –ù–∞–≤—Å–µ–≥–¥–∞\n–¶–µ–Ω–∞: {tariff[3]}\n'
                                          f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã üëá\n{tariffs}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã üëá',
                                          reply_markup=kb)
                await Dialog.accept_pay_state.set()
        else:
            cur.execute(f'SELECT * FROM Tariffs WHERE name="{pick}"')
            times = cur.fetchall()
            if times:
                kb = InlineKeyboardMarkup()
                for i in range(len(times)):
                    time = times[i][1]
                    if time == '–ù–∞–≤—Å–µ–≥–¥–∞':
                        kb.add(InlineKeyboardButton(f'{time}', callback_data=time))
                    else:
                        kb.add(InlineKeyboardButton(f'{time} –¥–Ω–µ–π', callback_data=time))
                kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
                await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ üëá', reply_markup=kb)
                await state.update_data(deposit_buy='buy')
                await Dialog.choice_pay_method_state.set()
            else:
                await call.message.answer('–î–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', reply_markup=menu_user)
                await state.finish()


@dp.callback_query_handler(state=Dialog.choice_pay_method_state)
async def choice_pay_method_set(call: CallbackQuery, state=FSMContext):
    pick = call.data
    if pick == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_user)
        await state.finish()
    else:
        data = await state.get_data()
        if data.get('deposit_buy') == 'buy':
            await state.update_data(choice_days=pick)
            data = await state.get_data()
            cur.execute('SELECT * FROM Payment_methods WHERE work=1')
            methods = cur.fetchall()
            kb = InlineKeyboardMarkup()
            for i in range(len(methods)):
                method = methods[i][0]
                kb.add(InlineKeyboardButton(method, callback_data=method))
            kb.add(InlineKeyboardButton('–ë–∞–ª–∞–Ω—Å', callback_data='–ë–∞–ª–∞–Ω—Å'))
            kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
            cur.execute(f'SELECT * FROM Tariffs WHERE name="{data.get("choice_tariff")}" AND '
                        f'days = "{data.get("choice_days")}" AND work=1')
            tariff = cur.fetchone()
            await state.update_data(choice_price=tariff[3])
            if pick == '–ù–∞–≤—Å–µ–≥–¥–∞':
                await call.message.answer(f'–ö–∞–Ω–∞–ª: {data.get("choice_tariff")}\n–°—Ä–æ–∫: {data.get("choice_days")}\n'
                                          f'–û–ø–∏—Å–∞–Ω–∏–µ: {tariff[2]}\n–¶–µ–Ω–∞: {tariff[3]} ‚ÇΩ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã üëá',
                                          reply_markup=kb)
                await Dialog.accept_pay_state.set()
            else:
                await call.message.answer(f'–ö–∞–Ω–∞–ª: {data.get("choice_tariff")}\n–°—Ä–æ–∫: {data.get("choice_days")} –¥–Ω–µ–π\n'
                                        f'–û–ø–∏—Å–∞–Ω–∏–µ: {tariff[2]}\n–¶–µ–Ω–∞: {tariff[3]} ‚ÇΩ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã üëá',
                                        reply_markup=kb)
                await Dialog.accept_pay_state.set()
        elif data.get('deposit_buy') == 'deposit':
            await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_user)
            await state.finish()


@dp.callback_query_handler(state=Dialog.accept_pay_state)
async def accept_pay_set(call: CallbackQuery, state=FSMContext):
    pick = call.data
    if pick == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_user)
        await state.finish()
    else:
        data = await state.get_data()
        price = int(data.get('choice_price'))
        await state.update_data(choice_method=pick)
        if pick == '–ë–∞–ª–∞–Ω—Å':
            cur.execute(f'SELECT * FROM Users WHERE user_id={call.from_user.id}')
            balance = int(cur.fetchone()[4])
            await state.update_data(balance=balance)
            if balance < price:
                kb = InlineKeyboardMarkup()
                kb.add(InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='deposit'))
                await call.message.answer(f'–¶–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞: {price}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}', reply_markup=menu_user)
                await call.message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ', reply_markup=kb)
                await state.finish()
            else:
                kb = InlineKeyboardMarkup()
                kb.add(InlineKeyboardButton('–î–∞', callback_data='yes'))
                kb.add(InlineKeyboardButton('–ù–µ—Ç', callback_data='to_menu'))
                cur.execute(f'SELECT * FROM Tariffs WHERE name="{data.get("choice_tariff")}" AND '
                            f'days="{data.get("choice_days")}" AND work=1')
                tariff = cur.fetchone()
                if tariff:
                    await state.update_data(choice_tariff=tariff)
                    await call.message.answer(f'–ö–∞–Ω–∞–ª: {tariff[0]}\n–î–Ω–µ–π: {tariff[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {tariff[2]}'
                                              f'–¶–µ–Ω–∞: {price} —Ä—É–±.\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ë–∞–ª–∞–Ω—Å\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?',
                                              reply_markup=kb)
                    await Dialog.balance_pay_check_state.set()
                else:
                    await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_user)
                    await state.finish()
        else:
            cur.execute(f'SELECT * FROM Payment_methods WHERE name="{pick}" AND work=1')
            method = cur.fetchone()
            if method:
                deposit_buy = data.get('deposit_buy')
                if method[4]:
                    pass
                else:
                    kb = InlineKeyboardMarkup()
                    kb.add(InlineKeyboardButton('–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data='yes'))
                    kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
                    await call.message.answer(f'–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {method[0]}\n'
                                              f'–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {data.get("choice_price")}\n–ü–µ—Ä–µ–≤–æ–¥: {method[3]}',
                                              reply_markup=kb)
                    await Dialog.pay_fiat_state.set()
            else:
                await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_user)
                await state.finish()


@dp.callback_query_handler(state=Dialog.pay_fiat_state)
async def check_pay_fiat_set(call: CallbackQuery, state=FSMContext):
    if call.data == 'to_menu':
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_user)
        await state.finish()
    else:
        kb = ReplyKeyboardMarkup()
        kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
        await call.message.answer('üí∞ –û–ø–ª–∞—Ç–∏–ª–∏?\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ: —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.\n'
                                  '–ù–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã: –¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.\n'
                                  '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"', reply_markup=kb)
        await Dialog.check_pay_fiat_state.set()


@dp.message_handler(content_types=['photo', 'text'], state=Dialog.check_pay_fiat_state)
async def check_pay_fiat_set(msg: Message, state=FSMContext):
    if msg.photo:
        photo = msg.photo[0].file_id
        date = get_date()
        data = await state.get_data()
        user_name = msg.from_user.full_name
        user_id = msg.from_user.id
        price = data.get("choice_price")
        method = data.get("choice_method")
        cur.execute('SELECT * FROM Purchase')
        number = len(cur.fetchall())
        deposit_buy = data.get('deposit_buy')
        cur.execute('SELECT * FROM Admins WHERE payments=1')
        admins = tuple(map(lambda x: x[0], cur.fetchall()))
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='accept_purchase'))
        kb.add(InlineKeyboardButton('‚ùå–°–ø–∞–º', callback_data='cancel_purchase'))
        if data.get('choice_promo') == None:
            await state.update_data(choice_promo='–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            data = await state.get_data()
        if deposit_buy == 'buy':
            tariff = f'{data.get("choice_tariff")}/{data.get("choice_days")}'
        elif deposit_buy == 'deposit':
            tariff = deposit_buy
        admin = 0
        if msg.from_user.id in admins:
            admin = 1
        cur.execute('INSERT INTO Purchase VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', (user_id, date, photo, tariff, method,
                                                                                price, number, False, False, admin))
        con.commit()
        for admin in admins:
            await bot.send_photo(chat_id=admin, photo=photo, caption=f'üí∞–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '
                                                                         f'{user_name}\n'
                                                                         f'user id: {user_id}\n'
                                                                         f'–¢–∞—Ä–∏—Ñ: {tariff}\n'
                                                                         f'–ü—Ä–æ–º–æ–∫–æ–¥: {data.get("choice_promo")}\n'
                                                                         f'–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price}\n'
                                                                         f'–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {method}\n'
                                                                         f'–ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: {number}', reply_markup=kb)
        await state.finish()
    elif msg.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_user)
        await state.finish()
    else:
        await msg.answer('–°–æ–æ–±—â–µ–Ω–∏–Ω–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π (–Ω–∞–ø–∏—à–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã)')


@dp.callback_query_handler(text='accept_purchase')
async def accept_purchase_func(call: CallbackQuery):
    photo = dict(call)['message']['photo'][0]['file_id']
    await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞ –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è')
    await Dialog.accept_purchase_state.set()


@dp.message_handler(state=Dialog.accept_purchase_state)
async def accept_purchase_set(msg: Message, state=FSMContext):
    number = msg.text.strip()
    try:
        cur.execute(f'SELECT * FROM Purchase WHERE number={number}')
        data = cur.fetchone()
    except:
        await msg.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞. –ù–∞–∂–º–∏—Ç–µ '
                         '"‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–æ–≤–æ', reply_markup=menu_kb)
        await state.finish()
    else:
        if not data[7]:
            number = int(number)
            cur.execute('SELECT * FROM Purchase')
            all = len(cur.fetchall())
            if number > all:
                await msg.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞. –ù–∞–∂–º–∏—Ç–µ '
                                 '"‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–æ–≤–æ', reply_markup=menu_kb)
                await state.finish()
            elif data[7]:
                await msg.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞. –ù–∞–∂–º–∏—Ç–µ '
                                 '"‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–æ–≤–æ', reply_markup=menu_kb)
                await state.finish()
            else:
                tariff = data[3].split('/')[0]
                if tariff == 'deposit':
                    try:
                        cur.execute(f'SELECT * FROM Purchase WHERE number={number} AND accept=0')
                        data = cur.fetchone()
                    except:
                        await msg.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂—É # {number}')
                    else:
                        if data:
                            try:
                                cur.execute(f'SELECT * FROM Users WHERE user_id={data[0]}')
                                user = cur.fetchone()
                                balance = user[4]
                                cur.execute(f'UPDATE Users SET balance={int(balance) + int(data[5])} WHERE user_id='
                                            f'{user[0]}')
                                con.commit()
                            except:
                                await msg.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂—É # {number}')
                            else:
                                await msg.answer(f'–ü–ª–∞—Ç—ë–∂ # {number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω')
                                await bot.send_message(chat_id=data[0], text=f'–ü–ª–∞—Ç—ë–∂ #{number} –Ω–∞ —Å—É–º–º—É {data[5]} —Ä—É–±. '
                                                                             f'–ø–æ–¥—Ç–≤–µ—Ä–¥–∂—ë–Ω', reply_markup=menu_user)
                                cur.execute(f'UPDATE Purchase SET sent=1 WHERE number={number}')
                                cur.execute(f'UPDATE Purchase SET accept=1 WHERE number={number}')
                                con.commit()
                            await state.finish()
                        else:
                            await msg.answer(f'–ü–ª–∞—Ç—ë–∂ # {number} —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω')
                else:
                    link, links = None, None
                    try:
                        if tariff == '–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞':
                            cur.execute('SELECT * FROM Tariffs_links')
                            links = list(map(lambda x: x[1], cur.fetchall()))
                            for i in range(len(links)):
                                link = await bot.export_chat_invite_link(chat_id=links[i])
                                links[i] = link
                            links = '\n'.join(links)
                            link = None
                        else:
                            cur.execute(f'SELECT * FROM Tariffs_links WHERE name="{data[3].split("/")[0]}"')
                            link = tuple(cur.fetchone())[1]
                            link = await bot.export_chat_invite_link(chat_id=str(link).strip())
                    except:
                        await msg.answer(f'‚ùó–í–Ω–∏–º–∞–Ω–∏–µ‚ùó\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ –ø–ª–∞—Ç–µ–∂—É # {number}',
                                         reply_markup=menu_kb)
                        await bot.send_message(chat_id=data[0],
                                               text=f'–ü–ª–∞—Ç—ë–∂ #{number} –ø–æ–¥—Ç–≤–µ—Ä–¥–∂—ë–Ω\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. '
                                                    f'–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                                               reply_markup=menu_user)
                    else:
                        await msg.answer(f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –ø–ª–∞—Ç–µ–∂—É #{number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
                                         reply_markup=menu_kb)
                        if link:
                            await bot.send_message(chat_id=data[0], text=f'–ü–ª–∞—Ç—ë–∂ #{number} –ø–æ–¥—Ç–≤–µ—Ä–¥–∂—ë–Ω\n–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: '
                                                                         f'{link}', reply_markup=menu_user)
                        else:
                            await bot.send_message(chat_id=data[0],
                                                   text=f'–ü–ª–∞—Ç—ë–∂ #{number} –ø–æ–¥—Ç–≤–µ—Ä–¥–∂—ë–Ω\n–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: '
                                                        f'{links}', reply_markup=menu_user)
                        cur.execute('INSERT INTO Subs VALUES (?, ?, ?, ?)', (data[0], data[3].split("/")[1], data[3].split()[0],
                                                                             get_date()))
                        cur.execute(f'UPDATE Purchase SET accept=1 WHERE number={number}')
                        cur.execute(f'UPDATE Users SET bought=1 WHERE user_id={data[0]}')
                        con.commit()
                    await state.finish()
        else:
            await msg.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞. –ù–∞–∂–º–∏—Ç–µ '
                             '"‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–æ–≤–æ', reply_markup=menu_kb)
            await state.finish()


@dp.callback_query_handler(text='cancel_purchase')
async def cancel_purchase_func(call: CallbackQuery):
    photo = dict(call)['message']['photo'][0]['file_id']
    await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞ –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è')
    await Dialog.cancel_purchase_state.set()


@dp.message_handler(state=Dialog.cancel_purchase_state)
async def cancel_purchase_set(msg: Message, state=FSMContext):
    number = msg.text.strip()
    try:
        cur.execute(f'SELECT * FROM Purchase WHERE number={number} AND accept=0')
        data = cur.fetchone()
    except:
            await msg.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞. –ù–∞–∂–º–∏—Ç–µ "‚ùå–°–ø–∞–º" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–æ–≤–æ',
                             reply_markup=menu_kb)
    else:
        if data:
            await msg.answer(f'–ü–ª–∞—Ç—ë–∂ #{number} –æ—Ç–º–µ–Ω—ë–Ω', reply_markup=menu_kb)
            await bot.send_message(chat_id=data[0], text=f'–ü–ª–∞—Ç—ë–∂ #{number} –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. '
                                                     f'–í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É', reply_markup=menu_user)
        else:
            await msg.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞. –ù–∞–∂–º–∏—Ç–µ "‚ùå–°–ø–∞–º" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–æ–≤–æ',
                             reply_markup=menu_kb)
    finally:
        await state.finish()


@dp.callback_query_handler(state=Dialog.balance_pay_check_state)
async def balance_pay_check_set(call: CallbackQuery, state=FSMContext):
    await call.message.delete()

    if call.data == 'yes':
        try:
            data = await state.get_data()
            tariff = data.get('choice_tariff')
            name = tariff[0]
            if name == '–í—Å—ë –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞':
                cur.execute('SELECT * FROM Tariffs_links')
                links = list(map(lambda x: x[1], cur.fetchall()))
                for i in range(len(links)):
                    link = await bot.create_chat_invite_link(chat_id=links[i], member_limit=1)
                    links[i] = link['invite_link']
                links = '\n'.join(links)
                link = None
            else:
                cur.execute(f'SELECT * FROM Tariffs_links WHERE name="{name}"')
                link = tuple(cur.fetchone())[1]
                link = await bot.create_chat_invite_link(chat_id=str(link).strip(), member_limit=1)
                link = link['invite_link']
        except:
            await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_user)
            await state.finish()
        else:
            user_id = call.from_user.id
            date = get_date()
            price = tariff[3]
            days = tariff[1]
            admin = 0
            if call.from_user.id in ADMINS:
                admin = 1
            try:
                if link:
                    await call.message.answer(f'–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {link}',
                                              reply_markup=menu_user)
                elif links:
                    await call.message.answer(f'–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {links}',
                                              reply_markup=menu_user)
            except:
                cur.execute('INSERT INTO Purchase VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', (user_id, date, '',
                                                                                 f'{name}/{tariff[1]}', '–ë–∞–ª–∞–Ω—Å',
                                                                                 price, 0, 0, 0, admin))
                await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_user)
                await state.finish()
            else:
                if days == '–ù–∞–≤—Å–µ–≥–¥–∞':
                    days = 0
                cur.execute(f'UPDATE Users SET balance={int(data.get("balance")) - int(price)} WHERE '
                            f'user_id="{user_id}"')
                cur.execute('SELECT * FROM Purchase')
                length = len(cur.fetchall())
                cur.execute('INSERT INTO Purchase VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);', (user_id, date, None,
                                                                                            f'{name}/{tariff[1]}',
                                                                                            '–ë–∞–ª–∞–Ω—Å', price, length,
                                                                                            1, 1, admin))
                cur.execute('INSERT INTO Subs VALUES (?, ?, ?, ?);', (user_id, days, name, date))
                con.commit()
                await state.finish()
    else:
        await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_user)
        await state.finish()


@dp.message_handler(text='üåü–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüåü')
async def my_profile_func(msg: Message):
    cur.execute(f'SELECT * FROM Users WHERE user_id={msg.from_user.id}')
    user = cur.fetchone()
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='deposit'))
    await msg.answer(f'id: {user[0]}\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[2]}\n–ë–∞–ª–∞–Ω—Å: {user[4]}', reply_markup=kb)


@dp.callback_query_handler(text='deposit')
async def deposit_sum_func(call: CallbackQuery, state=FSMContext):
    await state.update_data(deposit_buy='deposit')
    cur.execute('SELECT * FROM Settings')
    mn = cur.fetchone()[4]
    await state.update_data(choice_price=mn)
    kb = ReplyKeyboardMarkup()
    kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='to_menu'))
    await call.message.answer('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞')
    await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç {mn})', reply_markup=kb)
    await Dialog.deposit_state.set()


@dp.message_handler(state=Dialog.deposit_state)
async def deposit_set(msg: Message, state=FSMContext):
    pick = msg.text.lower()
    if pick == '–æ—Ç–º–µ–Ω–∞':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_user)
        await state.finish()
    elif pick.isdigit():
        pick = int(pick)
        data = await state.get_data()
        mn = data.get('choice_price')
        if not str(mn).isdigit():
            mn = 0
        if pick >= mn:
            await state.update_data(choice_price=pick)
            cur.execute('SELECT * FROM Payment_methods WHERE work=1')
            methods = cur.fetchall()
            kb = InlineKeyboardMarkup()
            for i in range(len(methods)):
                method = methods[i][0]
                kb.add(InlineKeyboardButton(method, callback_data=method))
            kb.add(InlineKeyboardButton('–ú–µ–Ω—é‚Ü©Ô∏è', callback_data='to_menu'))
            await msg.answer(f'–°—É–º–º–∞: {pick}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã', reply_markup=kb)
            await Dialog.accept_pay_state.set()
        else:
            await msg.answer(f'–°—É–º–º–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç {mn} —Ä—É–±.)', reply_markup=menu_kb)
            await state.finish()
    else:
        await msg.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Å—É–º–º—É', reply_markup=menu_user)
        await state.finish()


@dp.message_handler(text='üìû–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—åüìû')
async def callback_func(msg: Message):
    cur.execute('SELECT * FROM Settings')
    helper = cur.fetchone()[3]
    if helper:
        await msg.answer(f'–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {helper}')
    else:
        await msg.answer('–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')


@dp.message_handler(text='üî•–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–µ–±—èüî•')
async def offer_me(msg: Message, state=FSMContext):
    temp_kb = ReplyKeyboardMarkup()
    temp_kb.add(InlineKeyboardButton('–ú–µ–Ω—é', callback_data='to_menu'))
    await msg.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –º—ã –≤—ã–ª–æ–∂–∏–ª–∏ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –Ω–∞—à –∫–∞–Ω–∞–ª',
                              reply_markup=temp_kb)
    await Dialog.offer_me_state.set()


@dp.message_handler(content_types=['text', 'photo', 'video'], state=Dialog.offer_me_state)
async def offer_me_set(msg: Message, state=FSMContext):
    if msg.text == '–ú–µ–Ω—é':
        await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_user)
        await state.finish()
    else:
        temp_kb = InlineKeyboardMarkup()
        temp_kb.add(InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes'))
        temp_kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='no'))
        caption = ''
        if msg['caption']:
            caption = msg['caption']
        if msg.photo or msg.video:
            if msg.photo:
                await state.update_data(type='photo')
                media = msg.photo[0].file_id
                await state.update_data(media=media)
                await state.update_data(caption=caption)
                try:
                    await bot.send_photo(chat_id=msg.from_user.id, photo=media, caption=caption)
                except:
                    await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_user)
                else:
                    await msg.answer('–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Ç–µ–º, —á—Ç–æ –º—ã –≤—ã–ª–æ–∂–∏–º –≤–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –Ω–∞—à '
                                     '–ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª', reply_markup=temp_kb)
            else:
                await state.update_data(type='video')
                media = msg.video.file_id
                await state.update_data(media=media)
                await state.update_data(caption=caption)
                try:
                    await bot.send_video(chat_id=msg.from_user.id, video=media, caption=caption)
                except:
                    await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_user)
                else:
                    await msg.answer(
                        '–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Ç–µ–º, —á—Ç–æ –º—ã –≤—ã–ª–æ–∂–∏–º –≤–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –Ω–∞—à '
                        '–ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª', reply_markup=temp_kb)
            await Dialog.ans_offer_me_state.set()
        else:
            await msg.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º', reply_markup=menu_user)
            await state.finish()


@dp.callback_query_handler(state=Dialog.ans_offer_me_state)
async def offer_me_photo_set(call: CallbackQuery, state: FSMContext):
    if call.data == 'yes':
        cur.execute('SELECT * FROM Media')
        medias = len(cur.fetchall()) + 1
        temp_kb = InlineKeyboardMarkup()
        temp_kb.add(InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'accept_offer_{medias}'))
        temp_kb.add(InlineKeyboardButton('–ù–µ—Ç', callback_data=f'cancel_offer_{medias}'))
        try:
            cur.execute('SELECT * FROM Admins')
            admins = tuple(map(lambda x: x[0], cur.fetchall()))
            data = await state.get_data()
            media = data.get('media')
            type = data.get('type')
            caption = data.get('caption')
            if type == 'photo':
                for admin in admins:
                    await bot.send_photo(chat_id=admin, photo=media, caption=f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{medias}\n{caption}',
                                         reply_markup=temp_kb)
            elif type == 'video':
                for admin in admins:
                    await bot.send_video(chat_id=admin, video=media, caption=f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{medias}\n{caption}',
                                         reply_markup=temp_kb)
        except:
            await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_user)
        else:
            await call.message.answer('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', reply_markup=menu_user)
            try:
                cur.execute('INSERT INTO Media VALUES (?, ?, ?, ?, ?, ?);', (call.from_user.id, media, caption,
                                                                                type, 0, medias))
            except:
                pass
            else:
                con.commit()
    await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=menu_user)
    await state.finish()


@dp.callback_query_handler(text_startswith='accept_offer_')
async def offer_me(call: CallbackQuery):
    number = str(call.data).split('accept_offer_')
    try:
        number = number[1]
    except:
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
    else:
        try:
            cur.execute(f'SELECT * FROM Media WHERE number={number}')
            offer = cur.fetchone()
            cur.execute(f'UPDATE Media SET sent=1 WHERE number="{number}"')
        except:
            await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', reply_markup=menu_kb)
        else:
            await call.message.answer(f'–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è #{number} –∏–∑–º–µ–Ω–µ–Ω–æ —Å {offer[4]} –Ω–∞ 1', reply_markup=menu_kb)
            con.commit()


@dp.callback_query_handler(text_startswith='cancel_offer_')
async def offer_me(call: CallbackQuery):
    number = str(call.data).split('cancel_offer_')
    try:
        number = number[1]
    except:
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', reply_markup=menu_kb)
    else:
        try:
            cur.execute(f'SELECT * FROM Media WHERE number={number}')
            offer = cur.fetchone()
            cur.execute(f'UPDATE Media SET sent=-1 WHERE number="{number}"')
        except:
            await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –±–∞–∑–æ–π–¥ –¥–∞–Ω–Ω—ã—Ö',
                                      reply_markup=menu_kb)
        else:
            await call.message.answer(f'–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è #{number} –∏–∑–º–µ–Ω–µ–Ω–æ —Å {offer[4]} –Ω–∞ -1',
                                      reply_markup=menu_kb)
            con.commit()


@dp.callback_query_handler(text='offers')
async def offers(call: CallbackQuery):
    cur.execute('SELECT * FROM Media')
    offers = cur.fetchall()
    if not offers:
        await call.message.answer('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç')
    else:
        temp_kb = InlineKeyboardMarkup()
        for offer in offers:
            number = offer[5]
            temp_kb.add(InlineKeyboardButton(f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{number} ({offer[2]})',
                                             callback_data=f'offer_number_{number}'))
        await call.message.answer('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', reply_markup=temp_kb)


@dp.callback_query_handler(text_startswith='offer_number_')
async def offer_number_(call: CallbackQuery):
    number = call.data.split('offer_number_')
    try:
        number = number[1]
    except:
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    else:
        try:
            cur.execute(f'SELECT * FROM Media WHERE number="{number}"')
            offer = cur.fetchone()
            media = offer[1]
            caption = offer[2]
            type = offer[3]
            if type == 'photo':
                try:
                    await bot.send_photo(chat_id=call.from_user.id, photo=media, caption=caption)
                except:
                    await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                else:
                    pass
            elif type == 'video':
                try:
                    await bot.send_video(chat_id=call.from_user.id, video=media, caption=caption)
                except:
                    await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                else:
                    pass
        except:
            await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    # executor.start_polling(dp, skip_updates=True, on_startup=schedule_jobs)
